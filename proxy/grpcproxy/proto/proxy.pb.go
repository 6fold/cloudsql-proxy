// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/proxy.proto

package mygrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ClientMessage represents a message from a client to its Cloud SQL instance.
type ClientMessage struct {
	// The binary representation of a message from a client to the database.
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClientMessage) Reset()         { *m = ClientMessage{} }
func (m *ClientMessage) String() string { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()    {}
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_proxy_81e0e9a194525085, []int{0}
}
func (m *ClientMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientMessage.Unmarshal(m, b)
}
func (m *ClientMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientMessage.Marshal(b, m, deterministic)
}
func (dst *ClientMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientMessage.Merge(dst, src)
}
func (m *ClientMessage) XXX_Size() int {
	return xxx_messageInfo_ClientMessage.Size(m)
}
func (m *ClientMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ClientMessage proto.InternalMessageInfo

func (m *ClientMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ServerMessage represents a message from a Cloud SQL instance to its client.
type ServerMessage struct {
	// The binary representation of a message from the database to a client.
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerMessage) Reset()         { *m = ServerMessage{} }
func (m *ServerMessage) String() string { return proto.CompactTextString(m) }
func (*ServerMessage) ProtoMessage()    {}
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_proxy_81e0e9a194525085, []int{1}
}
func (m *ServerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerMessage.Unmarshal(m, b)
}
func (m *ServerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerMessage.Marshal(b, m, deterministic)
}
func (dst *ServerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerMessage.Merge(dst, src)
}
func (m *ServerMessage) XXX_Size() int {
	return xxx_messageInfo_ServerMessage.Size(m)
}
func (m *ServerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ServerMessage proto.InternalMessageInfo

func (m *ServerMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientMessage)(nil), "mygrpc.ClientMessage")
	proto.RegisterType((*ServerMessage)(nil), "mygrpc.ServerMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MyGrpcClient is the client API for MyGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MyGrpcClient interface {
	// A bidirectional streaming RPC to move data between a Cloud SQL instance and
	// its client.
	Connection(ctx context.Context, opts ...grpc.CallOption) (MyGrpc_ConnectionClient, error)
}

type myGrpcClient struct {
	cc *grpc.ClientConn
}

func NewMyGrpcClient(cc *grpc.ClientConn) MyGrpcClient {
	return &myGrpcClient{cc}
}

func (c *myGrpcClient) Connection(ctx context.Context, opts ...grpc.CallOption) (MyGrpc_ConnectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MyGrpc_serviceDesc.Streams[0], "/mygrpc.MyGrpc/Connection", opts...)
	if err != nil {
		return nil, err
	}
	x := &myGrpcConnectionClient{stream}
	return x, nil
}

type MyGrpc_ConnectionClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type myGrpcConnectionClient struct {
	grpc.ClientStream
}

func (x *myGrpcConnectionClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *myGrpcConnectionClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MyGrpcServer is the server API for MyGrpc service.
type MyGrpcServer interface {
	// A bidirectional streaming RPC to move data between a Cloud SQL instance and
	// its client.
	Connection(MyGrpc_ConnectionServer) error
}

func RegisterMyGrpcServer(s *grpc.Server, srv MyGrpcServer) {
	s.RegisterService(&_MyGrpc_serviceDesc, srv)
}

func _MyGrpc_Connection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MyGrpcServer).Connection(&myGrpcConnectionServer{stream})
}

type MyGrpc_ConnectionServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type myGrpcConnectionServer struct {
	grpc.ServerStream
}

func (x *myGrpcConnectionServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *myGrpcConnectionServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MyGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mygrpc.MyGrpc",
	HandlerType: (*MyGrpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connection",
			Handler:       _MyGrpc_Connection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/proxy.proto",
}

func init() { proto.RegisterFile("proto/proxy.proto", fileDescriptor_proxy_81e0e9a194525085) }

var fileDescriptor_proxy_81e0e9a194525085 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x28, 0xca, 0xaf, 0xa8, 0xd4, 0x03, 0xb3, 0x85, 0xd8, 0x72, 0x2b, 0xd3, 0x8b,
	0x0a, 0x92, 0x95, 0x94, 0xb9, 0x78, 0x9d, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0x7c, 0x53, 0x8b, 0x8b,
	0x13, 0xd3, 0x53, 0x85, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x78, 0x82, 0xc0, 0x6c, 0x90, 0xa2, 0xe0, 0xd4, 0xa2, 0xb2, 0xd4, 0x22, 0x3c, 0x8a, 0x8c, 0xbc,
	0xb8, 0xd8, 0x7c, 0x2b, 0xdd, 0x8b, 0x0a, 0x92, 0x85, 0x1c, 0xb8, 0xb8, 0x9c, 0xf3, 0xf3, 0xf2,
	0x52, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0x84, 0x44, 0xf5, 0x20, 0x56, 0xe9, 0xa1, 0xd8, 0x23, 0x05,
	0x17, 0x46, 0x31, 0x59, 0x89, 0x41, 0x83, 0xd1, 0x80, 0x31, 0x89, 0x0d, 0xec, 0x48, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x56, 0x31, 0xf2, 0xb6, 0xb9, 0x00, 0x00, 0x00,
}
